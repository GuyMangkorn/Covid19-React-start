{"version":3,"sources":["logo.svg","components/Country/Country.js","components/CountryList/CountryList.js","components/SearchBox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Country","props","className","src","country","ISO2","alt","cases","active","todayCases","deaths","CountryList","stats","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","seacrhField","target","value","state","countries","fetch","resp","json","this","forEach","a","data","prevState","concat","filteredCountries","filter","toLowerCase","includes","style","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,gMCkB5BC,G,kBAhBC,SAACC,GACb,OACI,yBAAKC,UAAY,WACZ,yBAAKC,IAAG,sCAAiCF,EAAMG,QAAQC,KAA/C,gBAAmEC,IAAOL,EAAMG,QAAQA,UAC9F,4BAAKH,EAAMG,QAAQA,SACnB,yBAAKF,UAAa,YACjB,6CAAeD,EAAMG,QAAQG,QAC7B,8CAAgBN,EAAMG,QAAQI,SAC9B,kDAAoBP,EAAMG,QAAQK,aAClC,6CAAeR,EAAMG,QAAQM,a,MCD9BC,MAPf,SAAsBV,GAClB,OACI,yBAAKC,UAAY,eACRD,EAAMW,MAAMC,KAAI,SAAAD,GAAK,OAAI,kBAAC,EAAD,CAAUR,QAASQ,SCM9CE,EAVG,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAYC,EAAiB,EAAjBA,aAC5B,OACI,2BAAOC,KAAK,SACZf,UAAY,SACZa,YAAaA,EACbG,SAAYF,KCsCLG,E,kDAtCb,aAAc,IAAD,8BACX,gBAmBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAnBpC,EAAKC,MAAQ,CACZC,UAAW,GACXd,MAAM,GACNU,YAAY,IALF,E,yMASSK,MAAM,wC,cAAnBC,E,gBACkBA,EAAKC,O,OAAvBH,E,OACNI,KAAKT,SAAS,CAACK,cACfI,KAAKL,MAAMC,UAAUK,QAArB,uCAA6B,WAAM3B,GAAN,iBAAA4B,EAAA,sEACRL,MAAM,sDAAD,OAAuDvB,EAAQJ,UAD5D,cACrB4B,EADqB,gBAERA,EAAKC,OAFG,OAErBI,EAFqB,OAG3B,EAAKZ,UAAS,SAAAa,GAAS,MACrB,CAACtB,MAAMsB,EAAUtB,MAAMuB,OAAhB,2BAA2BF,GAA3B,IAAkC5B,KAAOD,EAAQC,YAJ/B,2CAA7B,kCAAAyB,KAAA,gB,qIAWM,IAAD,EACsBA,KAAKL,MAA1Bb,EADD,EACCA,MAAMU,EADP,EACOA,YACPc,EAAoBxB,EAAMyB,QAAO,SAAAjC,GAAO,OAC5CA,EAAQA,QAAQkC,cAAcC,SAASjB,EAAYgB,kBAErD,OACI,yBAAKpC,UAAU,OACb,wBAAIsC,MAAO,CAACC,MAAM,UAAlB,eACA,kBAAC,EAAD,CAAW1B,YAAY,yBAAyBC,aAAcc,KAAKd,eAAe,6BAClF,kBAAC,EAAD,CAAcJ,MAASwB,S,GAjCfM,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b14b210f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './country.css';\r\nconst Country = (props) => {\r\n    return(\r\n        <div className = 'country'>\r\n             <img src={`https://www.countryflags.io/${props.country.ISO2}/flat/64.png`} alt = {props.country.country}></img>\r\n               <h1>{props.country.country}</h1>\r\n               <div className =  'describe'>\r\n                <p>{`Cases : ${props.country.cases}`}</p>  \r\n                <p>{`Active : ${props.country.active}`}</p>  \r\n                <p>{`TodayCases : ${props.country.todayCases}`}</p>    \r\n                <p>{`Death : ${props.country.deaths}`}</p>  \r\n                </div>  \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Country;","import React from 'react';\r\nimport Country from '../Country/Country'\r\nimport './countrylist.css';\r\nfunction CountryList (props){\r\n    return(\r\n        <div className = 'countrylist'>   \r\n               { props.stats.map(stats => <Country  country={stats}/>) }\r\n        </div>\r\n    );\r\n}\r\nexport default CountryList;","import React from 'react';\r\n\r\nconst SearchBox = ({placeholder,handleChange}) =>{\r\n    return(\r\n        <input type='search'\r\n        className = 'search'\r\n        placeholder={placeholder}\r\n        onChange = {handleChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport  CountryList  from './components/CountryList/CountryList';\nimport SearchBox from './components/SearchBox/SearchBox';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n     countries: [],\n     stats:[],\n     seacrhField:''\n    }\n  }\n  async componentDidMount(){\n     const resp = await fetch('https://api.covid19api.com/countries')\n     const countries = await resp.json()\n     this.setState({countries})\n     this.state.countries.forEach(async country => {\n       const resp = await fetch(`https://coronavirus-19-api.herokuapp.com/countries/${country.Country}`)\n       const data = await resp.json()\n       this.setState(prevState =>(\n         {stats:prevState.stats.concat({...data , ISO2 : country.ISO2})}\n       ))\n     })\n  }\n  handleChange = (e) =>{\n    this.setState({seacrhField:e.target.value})\n  }\n  render(){ \n    const {stats,seacrhField} = this.state\n    const filteredCountries = stats.filter(country =>(\n      country.country.toLowerCase().includes(seacrhField.toLowerCase())\n    ))\n    return (\n        <div className=\"App\">\n          <h1 style={{color:\"black\"}}>Covid Stats</h1>\n          <SearchBox placeholder=\"Enter country name ...\" handleChange={this.handleChange}/><hr></hr>\n          <CountryList  stats = {filteredCountries}  />\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}